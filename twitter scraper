import snscrape.modules.twitter as sntwitter
import pandas as pd
import streamlit as st
import datetime
import pymongo
import time

client = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = client["Twitter_Database"]     
tweets_df = pd.DataFrame()
dfm = pd.DataFrame()
st.write("# Twitter data scraping")
option = st.selectbox('How would you like the data to be searched?',('Keyword', 'Hashtag'))
word = st.text_input('Please enter a '+option,'')
start = st.date_input("Select the start date", datetime.date(2022, 1, 1),key='d1')
end = st.date_input("Select the end date", datetime.date(2023, 1, 1),key='d2')
tweet_c = st.number_input('Enter the Number Of tweets',min_value=1,step=1 )
tweets_list = []

# Collecting tweets based on keyword or hashtag

if word:
    if option=='Keyword':
        for i,tweet in enumerate(sntwitter.TwitterSearchScraper(f'{word} + since:{start} until:{end}').get_items()):
            if i>tweet_c:
                break
            tweets_list.append([ tweet.id, tweet.date,  tweet.content, tweet.lang, tweet.user.username, tweet.replyCount, tweet.retweetCount,tweet.likeCount, tweet.source, tweet.url ])
        tweets_df = pd.DataFrame(tweets_list, columns=['ID','Date','Content', 'Language', 'Username', 'ReplyCount', 'RetweetCount', 'LikeCount','Source', 'Url'])
    else:
        for i,tweet in enumerate(sntwitter.TwitterHashtagScraper(f'{word} + since:{start} until:{end}').get_items()):
            if i>tweet_c:
                break            
            tweets_list.append([ tweet.id, tweet.date,  tweet.content, tweet.lang, tweet.user.username, tweet.replyCount, tweet.retweetCount,tweet.likeCount, tweet.source, tweet.url ])
        tweets_df = pd.DataFrame(tweets_list, columns=['ID','Date','Content', 'Language', 'Username', 'ReplyCount', 'RetweetCount', 'LikeCount','Source', 'Url'])



def convert_df(df):    
    return df.to_csv()

#To download as CSV

if not tweets_df.empty:
    csv = convert_df(tweets_df)
    st.download_button(label="Download data as CSV",data=csv,file_name=word+' .csv',mime='text/csv',)

#To download as JSON
    
    json_string = tweets_df.to_json(orient ='records')
    st.download_button(label="Download data as JSON",file_name=word+". json",mime="application/json",data=json_string,)

#To upload tweets to database
    
    if st.button('Upload Tweets to Database'):
        coll=word
        mycoll=mydb[coll]
        dict=tweets_df.to_dict('records')
        if dict:
            mycoll.insert_many(dict) 
            mycoll.update_many({}, {"$set": {"KeyWord_or_Hashtag": word+str()}})
            st.success('Successfully uploaded to database')
        else:
            st.warning('Cant upload because there are no tweets')
            
#To display tweets
            
    if st.button('Show Tweets'):
        st.write(tweets_df)

#Sidebar to show and upload datasets

with st.sidebar:   
    st.write('Uploaded Datasets: ')
    for i in mydb.list_collection_names():
        mycollection=mydb[i]        
        if st.button(i):            
            dfm = pd.DataFrame(list(mycollection.find()))
            
#Display uploaded datasets
            
if not dfm.empty: 
    st.write(word)
    st.write(dfm)
